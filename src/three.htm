<!DOCTYPE HTML>
<html>
	<head>
		<meta charset="utf-8">
		<meta name="viewport" content="
			width=device-width, initial-scale=1.0,
			maximum-scale=1.0, user-scalable=0">
		<title>THREE</title>
		<style>
			html, body{
				width: 100%;
				height: 100%;
				padding:0px;
				margin:0px;
				overflow: hidden;
			}
			canvas{
				cursor:pointer;
				position:absolute;
				left: 0;
				touch-action: none;
			}
			.controls{
				border-radius:100%; left:0px; bottom:0px;
			}
		</style>
		<script src="build/three.js"></script>
		<script src="js/libs/stats.min.js"></script>
		<script src="js/libs/tween.min.js"></script>
		<script src="js/up/PointerLockControls.js"></script>
		<script src="js/up/DeviceOrientationControls.js"></script>
		<script src="js/up/lockPointer.js"></script>
		<!--script src="js/up/physi.js"></script-->
		<script src="js/up/particleEngine.js"></script>
		<script src="js/up/particleEngineExamples.js"></script>
		<script>
			//Physijs.scripts.worker = 'js/up/physijs_worker.js';
			//Physijs.scripts.ammo = 'ammo.js';
			var renderer,	//渲染器
				DRenderer,	//手机方向盘canvas
				scene,	//场景
				camera,	//相机
				textureLoader = new THREE.TextureLoader(),	//纹理加载器
				controls,	//控制器
				engines = [],	//渲染中的粒子集合
				tailGroup = new THREE.Group(),	//烟花尾group
				fireworkEngines = function(){	//烟花粒子集合
					var fireworkEngines = {},
						imgs = [
							'images/lensflare0_alpha.png',
							'images/spark.png',
							'images/spikey.png',
							'images/xin.png'
						];
					
					fireworkEngines.tailMaterials = function(){	//烟花尾巴材质集合	
						var tailMaterials = [];
						for(var i = 0; i < imgs.length; ++i){
							tailMaterials.push(new THREE.SpriteMaterial({color:0xffffff,map:textureLoader.load(imgs[i]),transparent:true,depthWrite : false,opacity:0.8}));
						}
						
						return tailMaterials;
					}();
					
					fireworkEngines.paramses = function(){	//参数集合
						var paramses = [];
						imgs[3] = 'images/xin1.png';
						for(var i = 0; i < imgs.length; i++){
							var params = Examples.firework.clone({particleTexture:textureLoader.load(imgs[i]),positionBase : new THREE.Vector3(0,0,0)});
							
							paramses.push(params);
						}
						return paramses;
					}();
					
					return fireworkEngines;
				}(),
				textPositions = function(){
					var textPositions = [],
						x = -80,
						y = 200,
						z = -100;
					//生
					line(x+2,x-2,y+8,y-2,z,z,3);
					line(x,x+20,y,y,z,z,5);
					line(x,x+20,y-10,y-10,z,z,5);
					line(x,x+20,y-20,y-20,z,z,5);
					line(x+10,x+10,y-20,y+10,z,z,5);
					//日
					x += 50;
					line(x,x+15,y+8,y+8,z,z,5);
					line(x,x+15,y-5,y-5,z,z,5);
					line(x,x+15,y-20,y-20,z,z,5);
					line(x,x,y+8,y-20,z,z,5);
					line(x+15,x+15,y+8,y-20,z,z,5);
					//快
					x += 50;
					line(x,x,y+8,y-20,z,z,5);
					line(x-2,x-4,y,y-4,z,z,2);
					line(x+2,x+4,y,y-4,z,z,2);
					x += 10;
					line(x+2,x+13,y+1,y+1,z,z,3);
					line(x,x+18,y-8,y-8,z,z,4);
					textPositions.push(new Pos(x+13,y-4,z));
					line(x+7,x+7,y+10,y-4,z,z,2);
					line(x+6,x+4,y-14,y-18,z,z,2);
					line(x+10,x+12,y-14,y-18,z,z,2);
					//乐
					x += 50;
					line(x,x+17,y+5,y+8,z,z,5);
					line(x,x,y,y-6,z,z,2);
					line(x,x+20,y-6,y-6,z,z,5);
					line(x+10,x+10,y,y-20,z,z,5);
					textPositions.push(new Pos(x+7,y-19,z));
					line(x+5,x+1,y-14,y-18,z,z,2);
					line(x+15,x+19,y-14,y-18,z,z,2);
					
					x -= 110;
					y -= 40;
					
					heart(x,y,z);
					heart(x-12,y-20,z);
					heart(x+12,y-20,z);
					heart(x+80,y,z);
					heart(x+68,y-20,z);
					heart(x+92,y-20,z);
					
					function heart(x,y,z){
						textPositions.push(new Pos(x,y+1,z));
						textPositions.push(new Pos(x-5,y+5,z));
						textPositions.push(new Pos(x-9,y+1,z));
						textPositions.push(new Pos(x-7,y-5,z));
						textPositions.push(new Pos(x,y-12,z));
						textPositions.push(new Pos(x+5,y+5,z));
						textPositions.push(new Pos(x+9,y+1,z));
						textPositions.push(new Pos(x+7,y-5,z));
						textPositions.push(new Pos(x,y-4,z));
					}
					function Pos(x,y,z){
						this.x=x;
						this.y=y;
						this.z=z;
					}
					function line(x,tx,y,ty,z,tz,count){
						var interval = (Math.abs(tx-x)*2 + Math.abs(ty-y)*2) / (count-1) / 2,
							vector = unitVector(x,y,tx,ty);
						for(var i = 0; i < count; ++i){
							textPositions.push(new Pos(x+interval*i*vector.x,y+interval*i*vector.y,z));
						}
					}
					return textPositions;
				}(),	//文本位置集合
				clock = new THREE.Clock(),
				stats;	//性能测试器
				
			engines.rendererUpdate = function(dt){
				var length = engines.length;
				while(length--){
					engines[length].update(dt);
				}
			};
				
			function app(){
				initial();
				animation();
			}
			
			//初始化
			function initial(){
				initScene();
				initLight();
				initCamera();
				initObjects();
				initRenderer();
				initControls();
				initStats();
				new Audio('music/a little love.mp3').play();
			}
			
			//初始化渲染器
			function initRenderer(){
				renderer = new THREE.WebGLRenderer({antialias:true});
				renderer.setClearColor(0x000,1.0);
				renderer.setSize(window.innerWidth,window.innerHeight);
				//renderer.shadowMap.enabled = true;
				document.body.appendChild(renderer.domElement);
				
				DRenderer = new DRenderer();
				document.body.appendChild(DRenderer.canvas);
			}
			
			//初始化场景
			function initScene(){
				scene = new THREE.Scene();
				//scene.setGravity(new THREE.Vector3(0,-30,0));
				//scene.fog = new THREE.Fog(0xffffff,0,50);
			}
			
			//初始化光源
			function initLight(){
				/*var ambientLight = new THREE.AmbientLight(0xffffff,0.1);
				scene.add(ambientLight);
				
				var hemisphereLight = new THREE.HemisphereLight(0xffffff,0xffffff,1);
				hemisphereLight.visible = true;
				hemisphereLight.position.set(0,0,0);
				scene.add(hemisphereLight);
				
				var geometry = new THREE.CubeGeometry(2,2,2);
				var geometry = new THREE.CubeGeometry();*/
			}
			
			//初始化相机
			function initCamera(){
				camera = new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,1,1000);
				camera.position.set(0,0,1);
				camera.lookAt({x:0,y:0,z:-1});
			}
			
			//初始化控制器
			function initControls(){
				controls = new THREEPointerLockControls(camera);
			}
			
			//初始化物体
			function initObjects(){
				scene.add(tailGroup);
				// 地板
				var geometry = new THREE.PlaneGeometry( 2000, 2000, 100, 100 );
				geometry.rotateX( - Math.PI / 2 );

				for ( var i = 0, l = geometry.vertices.length; i < l; i ++ ) {

					var vertex = geometry.vertices[ i ];
					vertex.x += Math.random() * 20 - 10;
					vertex.y += Math.random() * 2;
					vertex.z += Math.random() * 20 - 10;

				}

				for ( var i = 0, l = geometry.faces.length; i < l; i ++ ) {

					var face = geometry.faces[ i ];
					face.vertexColors[ 0 ] = new THREE.Color().setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					face.vertexColors[ 1 ] = new THREE.Color().setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );
					face.vertexColors[ 2 ] = new THREE.Color().setHSL( Math.random() * 0.3 + 0.5, 0.75, Math.random() * 0.25 + 0.75 );

				}

				var material = new THREE.MeshBasicMaterial( { vertexColors: THREE.VertexColors } );

				var mesh = new THREE.Mesh( geometry, material );
				mesh.position.set(0,-5,0);
				scene.add( mesh );
				
				
				//照骗
				var types = [{w:5.4,h:9.6},{w:9.6,h:9.6}],
					geometrys = [new THREE.PlaneGeometry(types[0].w,types[0].h),new THREE.PlaneGeometry(types[1].w,types[1].h)],
					material = new THREE.MeshBasicMaterial({ side:2 }),
					pics = function(){
						var pics = [];
						for(var i = 1; i < 13; ++i){
							pics.push(new Pic('images/pics/'+i+'.jpg'));
						}
						return pics;
					}();
				SpherePics(0,2,0,20,0.5,pics,geometrys,material);

				function Pic(url,type){
					this.url = url;
					this.type = type || 0;
				}
				
				function SpherePics(x,y,z,r,deg,pics,geometrys,material){
					var length = pics.length,
						mesh,
						sin,
						cos;
					while(length--){
						material = material.clone();
						material.map = textureLoader.load(pics[length].url);
						sin = Math.sin((length-4)*deg);
						cos = Math.cos((length-4)*deg);
						mesh = new THREE.Mesh(geometrys[pics[length].type],material);
						mesh.position.set(-60 + length * 10 ,50,-100);
						if(sin > 0){
							flying(mesh,x+r*cos,y,z+r*sin,Math.PI * 0.5 * cos,length);
						}else{
							flying(mesh,x+r*cos,y,z+r*sin,-Math.PI * 0.5 * cos,length);
						}
					}
				}
				
				function flying(mesh,x,y,z,ry,length){
					var oldObj = {
							x: mesh.position.x,
							y: mesh.position.y,
							z: mesh.position.z,
							ry:0
						},
						targetObj = {
							x : x,
							y : y,
							z : z,
							ry : ry
						};
					var tween = new TWEEN.Tween( oldObj )
							.to( targetObj, 5000*(length+1) )
							.easing( TWEEN.Easing.Circular.InOut)
							.delay(8000)
							.start()
							.onUpdate(function(){
								mesh.position.set(oldObj.x,oldObj.y,oldObj.z);
								mesh.rotation.y = oldObj.ry;
							});
					if(length == pics.length-1){
						tween.onComplete(function(){
							engines.pop().destroy();
							startFirework();
						});
					}
					scene.add(mesh);
				}
				
				//粒子
				var engine = new ParticleEngine();
				engine.setValues( Examples.starfield );
				engine.initialize();
				engines.push(engine);

				//烟花粒子
				//startFirework();
				function startFirework(){
					var lastTime = 0;
					engines.push({update:function(){
						var now = new Date,
							length = textPositions.length;
						if(!length){
							engines.remove(this);
							new TWEEN.Tween(tailGroup.position)
								.to({y:-80,z:-50},4500)
								.start()
								.delay(3000);
							return;
						}
						
						if(now - lastTime > 900){
							lastTime = now;
							var index = Math.floor(Math.random()*length);
							createFirework(textPositions[index]);
							textPositions.remove(index);
						}
					}});
				}
				function createFirework(targetPosition){
					fireworks({x:Math.floor(Math.random()*200)-100,y:-5,z:-Math.floor(Math.random()*50)-50},targetPosition,Math.floor(Math.random()*4));
				}
				function fireworks(oldPosition,targetPosition,index){
					var tail = new THREE.Sprite(fireworkEngines.tailMaterials[index]),
						engine = new ParticleEngine(),
						params = fireworkEngines.paramses[index];
						
					tail.scale.set(10,10,10);
					tail.position.copy(oldPosition);
					new TWEEN.Tween(tail.position).
						to(targetPosition,3000)
						.easing( TWEEN.Easing.Circular.In)
						.start()
						.onComplete(function(){
							//scene.remove(tail);
							engine.setValues(params);
							engine.initialize();
							engine.particleMesh.position.copy(tail.position);
							engines.push(engine);
							setTimeout(function(){
								this.destroy();
								engines.remove(this);
							}.bind(engine),5000);
						});
					tailGroup.add(tail);
				}

				//文字
				/*var loader = new THREE.FontLoader();
				loader.load( 'images/SimHei_Regular.json', function ( font ) {
					var gem = new THREE.TextGeometry('晶晶生日快乐', {
							size: 10, //字号大小，一般为大写字母的高度
							height: .1, //文字的厚度
							weight: 'normal', //值为'normal'或'bold'，表示是否加粗
							font : font,
							style: 'normal', //值为'normal'或'italics'，表示是否斜体
							bevelThickness: 1, //倒角厚度
							bevelSize: 1, //倒角宽度
							curveSegments: 10//弧线分段数，使得文字的曲线更加光滑
						}),
						material = new THREE.MeshBasicMaterial( { map:textureLoader.load('textures/hardwood2_diffuse.jpg'),transparent:true,opacity:1 } ),
						mesh = new THREE.Mesh(gem,material);
					mesh.rotation.x = Math.PI*0.2;
					mesh.position.set(-30,-50,-30);
					window.abc = mesh;
					scene.add(mesh);
					

				} );*/
			}
			
			//初始化性能测试器
			function initStats(){
				stats = new Stats();
				stats.domElement.style = 'position:absolute;left:0px;top:0px;'; 
				document.body.appendChild(stats.domElement);
			}
			
			window.addEventListener( 'resize', function() {
				camera.aspect = window.innerWidth / window.innerHeight;
				camera.updateProjectionMatrix();
				renderer.setSize( window.innerWidth, window.innerHeight );
				
				DRenderer.canvas.width = window.innerWidth;
				DRenderer.canvas.height = window.innerHeight;
				DRenderer.canvas.style.width = DRenderer.canvas.width + 'px';
				DRenderer.canvas.style.height = DRenderer.canvas.height + 'px';
				
			}, false );
			
			//动画
			function animation(){
				
				requestAnimationFrame(arguments.callee);
				var dt = clock.getDelta();
				
				controls.moves.update(dt);
				controls.update();
				TWEEN.update();
				engines.rendererUpdate(dt * 0.5);
				DRenderer.renderer();
				renderer.render(scene , camera);
				//scene.simulate();
				stats.update();
			}
			
			
			
			//删除指定下标或索引
			Array.prototype.remove=function(obj){  
				for(var i =0;i <this.length;i++){  
					var temp = this[i];  
					if(!isNaN(obj)){  
						temp=i;  
					}  
					if(temp == obj){  
						for(var j = i;j <this.length;j++){  
							this[j]=this[j+1];  
						}  
						this.length = this.length-1;  
					}
				}  
			};
			//得到向量
		function unitVector(x1,y1 ,x2, y2){
			var bottom = x2 - x1,
				right = y2 - y1,
				vector = Math.sqrt(Math.pow(bottom,2) +
					Math.pow(right,2));
			
			return {
				x: bottom /=  vector,
				y: right /= vector
			}
		}
		</script>
	</head>
	<body ontouchmove="event.preventDefault();" onload="app();">
	</body>
</html>
